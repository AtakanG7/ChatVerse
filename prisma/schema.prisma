// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  resetToken        String? // Make this optional as it might not always be set
  resetTokenExpires DateTime? // Make this optional as it might not always be 
  
  // Relationships
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  ideas            Idea[]
  comments         Comment[]
  likes            Like[]
  connections      UserConnection[] @relation("UserConnectionsAsUser")
  connectedTo      UserConnection[] @relation("UserConnectionsAsConnectedUser")
}

model UserConnection {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  user            User     @relation("UserConnectionsAsUser", fields: [userId], references: [id])
  connectedUserId String   @db.ObjectId
  connectedUser   User     @relation("UserConnectionsAsConnectedUser", fields: [connectedUserId], references: [id])
  createdAt       DateTime @default(now())

  @@unique([userId, connectedUserId])
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  senderId    String   @db.ObjectId
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  recipientId String   @db.ObjectId
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])

  @@index([senderId, recipientId])
}

model Idea {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id])
  comments  Comment[]
  likes     Like[]

  @@index([authorId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  // Relationships
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id])
  ideaId    String   @db.ObjectId
  idea      Idea     @relation(fields: [ideaId], references: [id])

  @@index([authorId, ideaId])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  // Relationships
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  ideaId    String   @db.ObjectId
  idea      Idea     @relation(fields: [ideaId], references: [id])

  @@unique([userId, ideaId])
}
